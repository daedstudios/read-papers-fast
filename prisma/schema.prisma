generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model WaitlistSignup {
  id        String   @id @default(cuid())
  email     String   @unique
  createdAt DateTime @default(now())
}

model User {
  id          String   @id @default(cuid())
  name        String?
  email       String   @unique
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  clerkUserId String   @unique
  imageUrl    String?
}

model Post {
  id        String   @id @default(cuid())
  title     String
  content   String
  authorId  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model PaperSummary {
  id               String    @id @default(dbgenerated("uuid_generate_v4()"))
  title            String
  fileName         String?
  url              String?
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  authors          String[]
  publishedDate    String?
  summary          String?
  paperSummaryID   String?   @db.Uuid
  relevanceSummary String?
  sections         Section[]
  surveys          Survey[]
}

model Section {
  id             String       @id @default(cuid())
  title          String
  summary        String
  paperSummaryId String
  order          Int          @default(0)
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  paperSummary   PaperSummary @relation(fields: [paperSummaryId], references: [id], onDelete: Cascade)
}

model Survey {
  id             String        @id @default(cuid())
  reason         String
  confidence     String
  field          String
  paperSummaryId String?
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  paperSummary   PaperSummary? @relation(fields: [paperSummaryId], references: [id])
}

model Acronym {
  id             String   @id @default(cuid())
  keyword        String
  value          String
  explanation    String
  paperSummaryId String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

model PaperContentGrobid {
  id             String           @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  created_at     DateTime?        @default(now()) @db.Timestamptz(6)
  head           String?
  head_n         String?
  para           Json?
  paper_id       String?
  order_index    Int?
  paperSummaryID String?          @db.Uuid
  simplifiedText String?
  simplifiedHead String?
  geminiOrder    String?
  paragraphs     PaperParagraph[]

  @@index([order_index], map: "idx_paper_content_order_index")
}

model PaperParagraph {
  id              String               @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  text            String
  order_index     Int
  created_at      DateTime?            @default(now()) @db.Timestamptz(6)
  updated_at      DateTime?            @default(now()) @db.Timestamptz(6)
  contentGrobidId String               @db.Uuid
  contentGrobid   PaperContentGrobid   @relation(fields: [contentGrobidId], references: [id], onDelete: Cascade)
  references      ParagraphReference[]

  @@index([contentGrobidId])
  @@index([order_index])
}

model ParagraphReference {
  id          String         @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  ref_key     String // The key of the reference
  ref_text    String // The actual text of the reference
  created_at  DateTime?      @default(now()) @db.Timestamptz(6)
  updated_at  DateTime?      @default(now()) @db.Timestamptz(6)
  paragraphId String         @db.Uuid
  paragraph   PaperParagraph @relation(fields: [paragraphId], references: [id], onDelete: Cascade)

  @@index([paragraphId])
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model PaperFigures {
  id                   String    @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  figure_type          String?
  figure_id            String?
  label                String?
  head                 String?
  description          String?
  coords               String?
  graphic_type         String?
  graphic_coords       String?
  extracted_image_path String?
  page_number          Int?
  source_file          String
  created_at           DateTime? @default(now()) @db.Timestamptz(6)
  updated_at           DateTime? @default(now()) @db.Timestamptz(6)
  image_url            String?
  paper_summary_id     String?   @db.Uuid
}

model PaperMainStructure {
  id            String       @id @db.Uuid
  created_at    DateTime?    @default(now()) @db.Timestamptz(6)
  updated_at    DateTime?    @default(now()) @db.Timestamptz(6)
  pdf_file_path String?
  xml_file_path String?
  status        String?
  PaperNotes    PaperNotes[]
}

model Reference {
  id               String            @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  created_at       DateTime?         @default(now()) @db.Timestamptz(6)
  updated_at       DateTime?         @default(now()) @db.Timestamptz(6)
  xml_id           String?
  doi              String?
  url              String?
  title            String?
  title_level      String?
  title_type       String?
  journal          String?
  volume           String?
  issue            String?
  page_from        String?
  page_to          String?
  page_range       String?
  publication_date String?
  date_type        String?
  paper_summary_id String            @db.Uuid
  authors          ReferenceAuthor[]

  @@index([paper_summary_id])
}

model ReferenceAuthor {
  id            String    @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  reference_id  String    @db.Uuid
  forename      String?
  forename_type String?
  surname       String?
  position      Int?
  created_at    DateTime? @default(now()) @db.Timestamptz(6)
  reference     Reference @relation(fields: [reference_id], references: [id], onDelete: Cascade)

  @@index([reference_id])
}

model PaperNotes {
  id                 String             @id @db.Uuid
  paper_summary_id   String             @db.Uuid
  xml_id             String?
  place              String?
  note_number        String?
  content            String?
  references         Json?
  html_content       String?
  created_at         DateTime?          @default(now()) @db.Timestamptz(6)
  updated_at         DateTime?          @default(now()) @db.Timestamptz(6)
  PaperMainStructure PaperMainStructure @relation(fields: [paper_summary_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_paper_summary")

  @@index([paper_summary_id], map: "idx_paper_notes_paper_summary_id")
  @@index([xml_id], map: "idx_paper_notes_xml_id")
}

model GrobidFigureData {
  id               String    @id @db.Uuid
  xml_id           String?
  figure_number    String?
  label            String?
  title            String?
  description      String?
  graphic_coords   String?
  graphic_type     String?
  has_graphic      Boolean?  @default(false)
  order_index      Int?
  html_content     String?
  created_at       DateTime? @default(now()) @db.Timestamptz(6)
  updated_at       DateTime? @default(now()) @db.Timestamptz(6)
  paper_summary_id String?   @db.Uuid
  image_url        String?

  @@index([paper_summary_id], map: "idx_grobid_figure_data_paper_summary_id")
  @@index([xml_id], map: "idx_grobid_figure_data_xml_id")
}

model SearchQuery {
  id        String   @id @default(cuid())
  query     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model FactCheckSession {
  id           String   @id @default(cuid())
  statement    String
  keywords     String[]
  finalVerdict Json?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  shareableId  String   @unique @default(cuid())

  // Relations
  papers FactCheckPaper[]

  @@index([shareableId])
}

model FactCheckPaper {
  id                 String   @id @default(cuid())
  factCheckSessionId String
  externalId         String // Original paper ID from OpenAlex
  title              String
  authors            String[]
  summary            String?
  published          String?
  doi                String?
  journalName        String?
  publisher          String?
  relevanceScore     Float?
  citedByCount       Int?
  links              Json? // Store as JSON array
  createdAt          DateTime @default(now())

  // Pre-evaluation fields
  preEvalVerdict String? // supports, contradicts, neutral, not_relevant
  preEvalSummary String?
  preEvalSnippet String?

  // Relations
  factCheckSession FactCheckSession   @relation(fields: [factCheckSessionId], references: [id], onDelete: Cascade)
  analysis         FactCheckAnalysis?

  @@index([factCheckSessionId])
}

model FactCheckAnalysis {
  id               String   @id @default(cuid())
  factCheckPaperId String   @unique
  pdfUrl           String?
  analysisMethod   String?
  supportLevel     String? // strongly_supports, supports, neutral, contradicts, strongly_contradicts, insufficient_data
  confidence       Float?
  summary          String?
  relevantSections Json? // Array of relevant sections
  keyFindings      String[]
  limitations      String[]
  error            String?
  createdAt        DateTime @default(now())

  // Relations
  factCheckPaper FactCheckPaper @relation(fields: [factCheckPaperId], references: [id], onDelete: Cascade)

  @@index([factCheckPaperId])
}
