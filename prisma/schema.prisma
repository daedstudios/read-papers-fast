generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id        String   @id @default(cuid())
  clerkUserId   String    @unique // clerk user id
  email         String    @unique
  name          String?
  imageUrl      String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Post {
  id        String   @id @default(cuid())
  title     String
  content   String
  authorId  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model PaperSummary {
  id              String   @id @default(cuid())
  title           String
  fileName        String?
  url             String?
  authors         String[] // Changed to array of strings for multiple authors
  publishedDate   String?    // Optional field for paper publication date as string
  summary         String?     @db.Text // Summary of the paper
  sections        Section[]
  surveys         Survey[]
  acronyms        Acronym[]
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

model Section {
  id            String       @id @default(cuid())
  title         String
  summary       String       @db.Text
  paperSummary  PaperSummary @relation(fields: [paperSummaryId], references: [id], onDelete: Cascade)
  paperSummaryId String
  order         Int          @default(0)
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
}

model Survey {
  id             String       @id @default(cuid())
  reason         String
  confidence     String
  field          String
  paperSummary   PaperSummary? @relation(fields: [paperSummaryId], references: [id])
  paperSummaryId String?
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
}

model Acronym {
  id             String       @id @default(cuid())
  keyword        String
  value          String
  explanation    String       @db.Text
  paperSummary   PaperSummary @relation(fields: [paperSummaryId], references: [id], onDelete: Cascade)
  paperSummaryId String
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt

}