generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model WaitlistSignup {
  id         String   @id @default(cuid())
  email      String   @unique
  createdAt  DateTime @default(now())
}

model User {
  id          String   @id @default(cuid())
  name        String?
  email       String   @unique
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  clerkUserId String   @unique
  imageUrl    String?
}

model Post {
  id        String   @id @default(cuid())
  title     String
  content   String
  authorId  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model PaperSummary {
  id            String         @id @default(dbgenerated("uuid_generate_v4()"))
  title         String
  fileName      String?
  url           String?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  authors       String[]
  publishedDate String?
  summary       String?
  // acronyms      Acronym[]
  sections      Section[]
  surveys       Survey[]
  paperSummaryID String?   @db.Uuid
}

model Section {
  id             String       @id @default(cuid())
  title          String
  summary        String
  paperSummaryId String
  order          Int          @default(0)
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  paperSummary   PaperSummary @relation(fields: [paperSummaryId], references: [id], onDelete: Cascade)
}

model Survey {
  id             String        @id @default(cuid())
  reason         String
  confidence     String
  field          String
  paperSummaryId String?
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  paperSummary   PaperSummary? @relation(fields: [paperSummaryId], references: [id])
}

model Acronym {
  id             String       @id @default(cuid())
  keyword        String
  value          String
  explanation    String
  paperSummaryId String
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
}

model PaperContentGrobid {
  id             String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  created_at     DateTime? @default(now()) @db.Timestamptz(6)
  head           String?
  head_n         String?
  para           Json?
  paper_id       String?
  order_index    Int?
  paperSummaryID String?   @db.Uuid
  simplifiedText String?

  @@index([order_index], map: "idx_paper_content_order_index")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model PaperFigures {
  id                   String        @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  paper_summary_id     String?       @db.Uuid
  figure_type          String?
  figure_id            String?
  label                String?
  head                 String?
  description          String?
  coords               String?
  graphic_type         String?
  graphic_coords       String?
  extracted_image_path String?
  page_number          Int?
  source_file          String
  created_at           DateTime?     @default(now()) @db.Timestamptz(6)
  updated_at           DateTime?     @default(now()) @db.Timestamptz(6)
  image_url            String?
  
}

model PaperMainStructure {
  id             String    @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  created_at     DateTime? @default(now()) @db.Timestamptz(6)
  updated_at     DateTime? @default(now()) @db.Timestamptz(6)
  pdf_file_path String?
  xml_file_path String?
  status         String?
}

